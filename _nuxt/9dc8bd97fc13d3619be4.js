(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{188:function(e,n,t){var content=t(222);"string"==typeof content&&(content=[[e.i,content,""]]),content.locals&&(e.exports=content.locals);(0,t(14).default)("de30e3c8",content,!0,{sourceMap:!1})},196:function(e,n,t){"use strict";t.r(n),n.default="precision highp float;\n\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\n\nuniform mat4 view;\nuniform mat4 projection;\nuniform mat4 worldViewProjection;\nuniform vec2 cameraMinMaxZ;\n\nvarying vec2 vUV;\nvarying vec3 vNormal;\nvarying vec3 vPosition;\n// varying float normalizedDepth;\n\n#include<bonesDeclaration>\n#include<instancesDeclaration>\n\n/*\n * Vertex shader for caustic and babylonjs.\n */\nvoid main() {\n    vec3 positionUpdated = position;\n\n    // include shaders to calculate instances and bones\n    #include<instancesVertex>\n    #include<bonesVertex>\n\n    // return normal, uv and position\n    vec4 worldPos = finalWorld * vec4(positionUpdated, 1.0);\n    vec4 viewPos = view * worldPos;\n\n    // float distancetoCamera = -viewPos.z;\n    // float distance = (cameraMinMaxZ.x + (cameraMinMaxZ.y - cameraMinMaxZ.x)*depth);\n    // float normalizedDistance = distance / cameraMinMaxZ.x;\n    // normalizedDepth = (distancetoCamera - cameraMinMaxZ.x)/(cameraMinMaxZ.y - cameraMinMaxZ.x);\n\n    vNormal = normalize(vec3(finalWorld * vec4(normal, 0.0)));\n    vPosition = worldPos.xyz;\n    vUV = uv;\n\n    gl_Position = projection * viewPos;\n}\n"},214:function(e,n,t){"use strict";t.r(n),n.default="precision highp float;\n\nvarying vec2 vUV;\n// varying vec3 vPosition;\nuniform float time;\nuniform vec3 fogColor;\nuniform vec2 cameraMinMaxZ;\n\nuniform sampler2D textureSampler;\nuniform sampler2D causticTexture;\nuniform sampler2D depthTexture;\n\n#define csb(f, con, sat, bri) mix(vec3(.5), mix(vec3(dot(vec3(.2125, .7154, .0721), f*bri)), f*bri, sat), con)\n\n#define TAU 6.28318530718\n#define MAX_ITER 8\n#define BASE_INTEN .005\n#define FOG_DENSITY 2.8 // TODO: review\n\nfloat fogFactorExp(\n  const float dist,\n  const float density\n) {\n  return 1.0 - clamp(exp(-density * dist), 0.0, 1.0);\n}\n\nfloat causticX(float x, float power, float gtime)\n{\n  float p = mod(x*TAU, TAU)-250.0;\n  float tTime = gtime * .5+23.0;\n\n\tfloat i = p;\n\tfloat c = 1.0;\n\tfloat inten = BASE_INTEN;\n\n\tfor (int n = 0; n < MAX_ITER/2; n++)\n\t{\n\t\tfloat t = tTime * (1.0 - (3.5 / float(n+1)));\n\t\ti = p + cos(t - i) + sin(t + i);\n\t\tc += 1.0/length(p / (sin(i+t)/inten));\n\t}\n\tc /= float(MAX_ITER);\n\tc = 1.17-pow(c, power);\n\n    return c;\n}\n\nfloat godRaysCalc(vec2 uv)\n{\n    float light = 0.0;\n\n    light += pow(causticX((uv.x+0.08*uv.y)/1.7+0.5, 1.8, time*0.65),10.0)*0.05;\n    light -= pow((1.0-uv.y)*0.3,2.0)*0.2;\n    light += pow(causticX(sin(uv.x), 0.3,time*0.7),9.0)*0.4;\n    light += pow(causticX(cos(uv.x*2.3), 0.3,time*1.3),4.0)*0.1;\n\n    light -= pow((1.0-uv.y)*0.3,3.0);\n    light = clamp(light,0.0,1.0);\n\n    return light;\n}\n\nvoid main() {\n  // apply visibility loss with distance\n  vec4 depthVec = texture2D(depthTexture, vUV);\n  float depth = depthVec.r;\n\n  // actual distance from the lens in scene units\n  float distance = (cameraMinMaxZ.x + (cameraMinMaxZ.y - cameraMinMaxZ.x)*depth);\n  float normalizedDistance = distance / cameraMinMaxZ.y;\n  float fogFactor = clamp(1.1*fogFactorExp(depth, FOG_DENSITY), 0.0, 1.0); // normalized distance\n\n  // god rays\n  vec3 skyColor = vec3(0.3, 1.0, 1.0);\n  // TODO: godRays should take camera angle into consideration\n  vec3 godRays = (godRaysCalc(vUV*2.)*mix(float(skyColor), 1.0, vUV.y*vUV.y) * vec3(0.7,1.0,1.0));\n\n  // TODO: noise\n  // TODO: color loss with depth\n  vec4 base = texture2D(textureSampler, vUV);\n  vec4 caustic = texture2D(causticTexture, vUV);\n\n  vec4 color;\n  color.rgb = base.rgb; // plain\n  // color.r = actualDepth.r; // plain\n  // color.rgb = caustic.rgb; // pure caustic\n  // color.rgb = godRays; // pure god rays\n  // color.rgb = vec3(distance, distance, distance); ; // just depth\n  // color.rgb = vec3(distance / cameraMinMaxZ.y, distance / cameraMinMaxZ.y, distance / cameraMinMaxZ.y); // normalized depth\n  // color.rgb = vec3(fogFactor, fogFactor, fogFactor); // pure fog\n  // color.rgb = mix(base.rgb, fogColor, fogFactor); // fog + texture\n  //color.rgb = mix(base.rgb, caustic.rgb, max(depth, 0.1)); // caustics + texture\n  color.rgb = mix(mix(base.rgb, caustic.rgb, caustic.a * depth), fogColor, fogFactor) + godRays; // everything\n\n  // color, saturation, brightness\n  color.rgb = csb(color.rgb, 1.1, 1.05, 1.22);\n\n\t// Vignette\n\tcolor.rgb = mix(color.rgb, vec3(.0), abs(vUV.x - 0.5)*abs(vUV.y * 2.0 - 1.0));\n\n  gl_FragColor.rgb = color.rgb;\n  gl_FragColor.w = 1.0; //base.w;\n}\n"},215:function(e,n,t){"use strict";t.r(n),n.default="precision highp float;\n\nattribute vec3 position;\nattribute vec2 uv;\n\nuniform mat4 worldViewProjection;\n\nvarying vec2 vUV;\n\nvoid main() {\n  vUV = uv;\n  gl_Position = worldViewProjection * vec4(position, 1.0);\n}\n"},216:function(e,n,t){"use strict";t.r(n),n.default="#ifdef GL_ES\nprecision highp float;\n#endif\n\nuniform vec3 color;\nuniform float time;\n\nvarying vec2 vUV;\nvarying vec3 vNormal;\nvarying vec3 vPosition;\n\nuniform sampler2D normalMap;\nuniform samplerCube environmentMap;\n\nvec4 getNoise( vec2 uv )\n{\n\tvec2 uv0 = ( uv / 103.0 ) + vec2(time / 17.0, time / 29.0);\n\tvec2 uv1 = uv / 107.0-vec2( time / -19.0, time / 31.0 );\n\tvec2 uv2 = uv / vec2( 8907.0, 9803.0 ) + vec2( time / 101.0, time / 97.0 );\n\tvec2 uv3 = uv / vec2( 1091.0, 1027.0 ) - vec2( time / 109.0, time / -113.0 );\n\tvec4 noise = vec4(0.0, 0.0, 0.0, 0.0);\n      texture2D( normalMap, uv0 ) +\n      texture2D( normalMap, uv1 ) +\n      texture2D( normalMap, uv2 ) +\n      texture2D( normalMap, uv3 );\n\treturn noise * 0.5 - 1.0;\n}\n\nvoid main(void) {\n  float alpha = 1.0;\n  float reflectivity = 0.3;\n  vec4 finalColor = vec4(color, alpha);\n  vec3 eyePos = normalize(vec3(vUV.xy, -3.0));\n\n//   vec3 eyePos = viewInverse[3].xyz;\n  vec3 viewDirection = normalize(eyePos - vPosition);\n\n  vec3 normal = vNormal;\n  normal = normalize(getNoise(vPosition.xz * 6.0).xyz * vec3( 1.5, 1.0, 1.5 ));\n  vec3 envTexel = textureCube(environmentMap, reflect(-viewDirection, normal)).xyz;\n  finalColor.rgb = finalColor.rgb + envTexel * reflectivity;\n\n  gl_FragColor = finalColor;\n}\n"},217:function(e,n,t){"use strict";t.r(n),n.default="#ifdef GL_ES\nprecision highp float;\n#endif\n\nuniform vec3 waterColor;\nuniform float time;\nuniform vec3 cameraPosition;\nuniform sampler2D channel2;\nuniform sampler2D channel3;\n\nvarying vec2 vUV;\nvarying vec3 vNormal;\nvarying vec3 vPosition;\n\n#define csb(f, con, sat, bri) mix(vec3(.5), mix(vec3(dot(vec3(.2125, .7154, .0721), f*bri)), f*bri, sat), con)\n\nvoid main(void) {\n  vec3 col = vec3(waterColor); // final color\n  const vec2 sun = vec2(-0.1, 0.6); // sun position\n  vec2 uv = vUV;\n  vec3 pos = vPosition;\n  vec3 dir = normalize(vec3(uv, -1.4));\n\n \t// calculate sun\n\tfloat i = max(0.0, 1.0-length(sun-uv));\n\tcol = vec3(pow(i, 1.9), pow(i, 1.0), pow(i, .8)) * 1.3;\n\n\t// Water distance colour...\n  float viewAngle = abs(dot(normalize(cameraPosition-vPosition), vec3(0, 1, 0)));\n\tcol = mix(col, vec3(0.0, .25, .45), ((1.0-vUV.y)*.45) * 1.8);\n\n  // Add water ripples...\n  float d = (3.0-pos.y) / -uv.y;\n  vec2 wat = (dir * d).xz-pos.xz;\n  wat +=  (texture(channel2, (wat*.03+time*.01)*.1, 1.0).z -\n    texture(channel3, wat*.02-time*.01, .0).y) * .4;\n  i = texture(channel3, wat* .02, 0.0).x;\n  col += vec3(i) * max(abs(uv.y), 0.0);\n\n  // contrast, saturation, brightness\n  col = csb(col, 1.1, 1.05, 1.22);\n\n  // handle horizon\n  col = mix(waterColor, col, clamp(viewAngle*3.0 - 0.3, 0.0, 1.0));\n\n  gl_FragColor.rgb = col;\n}\n"},218:function(e,n,t){"use strict";t.r(n),n.default="precision highp float;\n\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\n\nuniform mat4 view;\nuniform mat4 projection;\nuniform mat4 worldViewProjection;\nuniform vec2 cameraMinMaxZ;\n\nvarying vec2 vUV;\nvarying vec3 vNormal;\nvarying vec3 vPosition;\n\n#include<bonesDeclaration>\n#include<instancesDeclaration>\n\nvoid main() {\n    vec3 positionUpdated = position;\n\n    // include shaders to calculate instances and bones\n    #include<instancesVertex>\n    #include<bonesVertex>\n\n    // return normal, uv and position\n    vec4 worldPos = finalWorld * vec4(positionUpdated, 1.0);\n    vec4 viewPos = view * worldPos;\n\n    vNormal = normalize(vec3(finalWorld * vec4(normal, 0.0)));\n    vPosition = worldPos.xyz;\n    // TODO vUV = uv * uvRepeat + uvOffset;\n    vUV = uv;\n\n    gl_Position = projection * viewPos;\n}\n"},219:function(e,n,t){"use strict";t.r(n),n.default="#ifdef GL_ES\nprecision highp float;\n#endif\n\n#define TAU 6.28318530718\n#define MAX_ITER 5\n#define SPEED 0.3\n#define SCALE 30.0\n\nuniform float time;\n\nvarying vec2 vUV;\nvarying vec3 vNormal;\nvarying vec3 vPosition;\n\nvec4 caustic(vec2 uv) {\n  vec2 p = mod(uv*TAU, TAU)-250.0;\n  float t = time * SPEED + 23.0;\n\n  vec2 i = vec2(p);\n  float c = 1.0;\n  float inten = .005;\n\n  for (int n = 0; n < MAX_ITER; n++) {\n    float t = t * (1.0 - (3.5 / float(n+1)));\n    i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));\n    c += 1.0/length(vec2(p.x / (sin(i.x+t)/inten),p.y / (cos(i.y+t)/inten)));\n  }\n\n  c /= float(MAX_ITER);\n  c = 1.17-pow(c, 1.4);\n  vec3 color = vec3(pow(abs(c), 8.0));\n  color = clamp(color + vec3(0.0, 0.0, 0.0), 0.0, 1.0);\n\n  float alpha=0.5;\n  float contrast=0.0;\n  color = mix(color, vec3(1.0,1.0,1.0),contrast);\n  //color.a = alpha;\n  vec4 color4 = vec4(color,0.0);\n\n  return color4;\n}\n\n/*\n * Fragment shader for caustic and babylonjs. Renders a fake caustic, using an\n * animated noise function and the world coordinates as UV.\n */\nvoid main(void)\n{\n  // TODO: y coordinate should multiply caustic to reduce light on higher ocean depths\n\n  vec2 coord = vec2(fract(vPosition.x/SCALE), fract(vPosition.z/SCALE));\n  if (vNormal.y > 0.0) {\n    // scale by normal to make caustic less pronounced for more vertical faces.\n    gl_FragColor = clamp(caustic(coord), 0.0, 1.0) * vNormal.y;\n    gl_FragColor.a = 1.0;\n  }\n  else {\n    gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n  }\n}\n\n"},220:function(e,n,t){"use strict";t.r(n),n.default="#ifdef GL_ES\nprecision highp float;\n#endif\n\nuniform float time;\n\nvarying vec2 vUV;\nvarying vec3 vNormal;\nvarying vec3 vPosition;\n\n/*\n * simple pure black shader for objects that should not render caustics.\n */\nvoid main(void)\n{\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n}\n\n"},221:function(e,n,t){"use strict";var r=t(188);t.n(r).a},222:function(e,n,t){var r=t(13);(e.exports=r(!1)).push([e.i,"#underwater{position:relative}#underwater,#underwater-3d{height:100vh;width:100vw}#underwater-debug{top:0;right:0}#underwater-debug,#underwater-hud{position:absolute;padding:10px;z-index:1000;border-radius:10px;background:#000;font-family:Oxygen,monospace;color:#fff;text-align:right}#underwater-hud{bottom:0;left:0;width:160px;height:200px;font-size:64px}#inspector-host .label,#sceneExplorer .label{color:#fff;font-weight:400;font-size:14px}#inspector-host .title,#sceneExplorer .title{color:#fff;font-weight:400;font-size:14px;line-height:normal;font-family:Arial;line-height:1}",""])},246:function(e,n,t){"use strict";t.r(n);var r=t(241),o=(t(73),t(39),t(28),t(19),t(60),t(174)),c=(t(193),t(194),t(59),t(211)),l=t(212),d=t(213),h=function(){function e(n,t,r){Object(c.a)(this,e),this.id=n,this.position=t,this.velocity=r,this.force=new o.Vector3(0,0,0)}return Object(l.a)(e,[{key:"orientation",get:function(){return this.velocity.normalize()}}]),e}(),f=function(){function e(n,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,l=arguments.length>3&&void 0!==arguments[3]?arguments[3]:100,d=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null;Object(c.a)(this,e),this.cohesion=.3,this.separation=.4,this.alignment=1,this.separationMinDistance=3,this.maxSpeed=1,this.boundsMin=new o.Vector3(t.x-l,t.y-l,t.z-l),this.boundsMax=new o.Vector3(t.x+l,t.y+l,t.z+l),this.otherForces=[],this.birds=[],this.debug={show:!1,influences:[],arrows:[]},d||(d=new o.Vector3(.3,.1,.3));var f=d.length();this.center=t.clone(),this.avgVel=new o.Vector3(0,0,0);for(var i=0;i<n;i++){var v=this.center.add(new o.Vector3((Math.random()-.5)*r,(Math.random()-.5)*r,(Math.random()-.5)*r)),m=new o.Vector3(d.x+(Math.random()-.5)/10*f,d.y+(Math.random()-.5)/10*f,d.z+(Math.random()-.5)/10*f),x=new h(i,v,m);this.birds.push(x)}}return Object(l.a)(e,[{key:"update",value:function(e){var n=this;this._updateCenter();var t=this.maxSpeed*this.maxSpeed;this.birds.forEach((function(r){var o=n._forceCentreMass(r),c=n._forceSeparation(r),l=n._forceMatchVelocity(r),d=n._forceBoundaries(r),h=o.add(c).add(l).add(d);n.otherForces.forEach((function(e){h.add(e(n,r))})),r.force.copyFrom(h),r.velocity.addInPlace(h.scale(e)),r.velocity.lengthSquared()>t&&(r.velocity=r.velocity.normalize().scale(n.maxSpeed)),r.position.addInPlace(r.velocity.scale(e))})),this._updateDebug()}},{key:"_updateCenter",value:function(){if(this.birds.length){var e=new o.Vector3(0,0,0),n=new o.Vector3(0,0,0);this.birds.forEach((function(t){e.addInPlace(t.position),n.addInPlace(t.velocity)})),e.scaleInPlace(1/this.birds.length),n.scaleInPlace(1/this.birds.length),this.center=e,this.avgVel=n}}},{key:"_forceCentreMass",value:function(e){return this.center.subtract(e.position).scale(this.cohesion)}},{key:"_forceSeparation",value:function(e){var n=this,t=new o.Vector3(0,0,0);return this.birds.forEach((function(r){if(e.id!==r.id){var o=e.position.subtract(r.position),c=o.length();c<n.separationMinDistance&&t.addInPlace(o.scale(n.separationMinDistance-c))}})),t.scale(this.separation)}},{key:"_forceMatchVelocity",value:function(e){return this.avgVel.subtract(e.velocity).scale(this.alignment)}},{key:"_forceBoundaries",value:function(e){var n=new o.Vector3(0,0,0);return e.position.x<.9*this.boundsMin.x?n.x=.2:e.position.x>.9*this.boundsMax.x&&(n.x=-.2),e.position.y<.9*this.boundsMin.y?n.y=.2:e.position.y>.9*this.boundsMax.y&&(n.y=-.2),e.position.z<.9*this.boundsMin.z?n.z=.2:e.position.z>.9*this.boundsMax.z&&(n.z=-.2),n}},{key:"addForce",value:function(e){this.otherForces.push(e)}},{key:"showDebug",value:function(e){var n=this;if(this.debug.show=!0,!this.debug.center){var t=new o.StandardMaterial("debug_center",e);t.diffuseColor=o.Color3.FromHexString("#FF0000"),this.debug.center=o.MeshBuilder.CreateSphere("center",{diameter:.1,segments:8});var r=new o.StandardMaterial("debug_bbox",e);r.diffuseColor=o.Color3.FromHexString("#00FF00"),r.wireframe=!0,this.debug.center.material=t,this.debug.bbox=o.Mesh.CreateBox("boids_bbox",1,e),this.debug.bbox.scaling.x=Math.abs(this.boundsMax.x-this.boundsMin.x),this.debug.bbox.scaling.y=Math.abs(this.boundsMax.y-this.boundsMin.y),this.debug.bbox.scaling.z=Math.abs(this.boundsMax.z-this.boundsMin.z),this.debug.bbox.position.x=Math.abs(this.boundsMax.x-this.boundsMin.x)/2,this.debug.bbox.position.y=Math.abs(this.boundsMax.y-this.boundsMin.y)/2,this.debug.bbox.position.z=Math.abs(this.boundsMax.z-this.boundsMin.z)/2,this.debug.bbox.material=r;var c=new o.StandardMaterial("debug_wireframe",e);c.diffuseColor=o.Color3.FromHexString("#FFFFFF"),c.wireframe=!0,this.birds.forEach((function(t){t.debug={},t.debug.force=o.MeshBuilder.CreateTube("bird_arrow_"+t.uniqueId,{path:[t.position.add(t.velocity),t.position.clone()],radius:.01,updatable:!0},e),t.debug.influence=o.MeshBuilder.CreateSphere("bird_influence_"+t.uniqueId,{diameter:1,segments:8}),t.debug.influence.scaling.setAll(n.separationMinDistance),t.debug.influence.material=c}))}}},{key:"_updateDebug",value:function(){this.debug.show&&(this.debug.center.position.copyFrom(this.center),this.birds.forEach((function(e){var path=[e.position.add(e.force.scale(20)),e.position.clone()];e.debug.force=o.MeshBuilder.CreateTube(e.debug.force.name,{path:path,radius:.01,instance:e.debug.force}),e.debug.influence.position.copyFrom(e.position)})))}},{key:"gui",value:function(e){var header,n,t=this,r=d.AdvancedDynamicTexture.CreateFullscreenUI("UI",void 0,void 0,e),o=new d.StackPanel;o.width="220px",o.horizontalAlignment=d.Control.HORIZONTAL_ALIGNMENT_RIGHT,o.verticalAlignment=d.Control.VERTICAL_ALIGNMENT_CENTER,r.addControl(o);var c=function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2,c=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){};(header=new d.TextBlock).text=e+" "+t[e],header.height="30px",header.color="white",o.addControl(header),(n=new d.Slider).minimum=0,n.maximum=r,n.value=t[e],n.height="20px",n.width="200px";var l=function(e,header,n){return function(t){e[n]=t,header.text=n+" "+t,c.apply(e)}}(t,header,e);n.onValueChangedObservable.add(l),o.addControl(n)};c("cohesion"),c("separation"),c("alignment"),c("separationMinDistance",10,(function(e){t.debug.center&&t.birds.forEach((function(e){e.debug.influence.scaling.setAll(t.separationMinDistance)}))}))}}]),e}(),v=t(214),m=t(215),x=t(216),M=t(217),w=t(218),y=t(219),C=t(220),T=t(196),S=t(196),E={props:{},data:function(){return{engine:null,scene:null,camera:null,assetsManager:null,renderTargetCaustic:null,causticMaterial:null,causticBlackMaterial:null,waterMaterial:null,rttMaterials:[],mantas:[],depth:0,time:0,air:100,fps:0}},mounted:function(){var e=this,n=document.getElementById("underwater-3d");this.bootScene(n),this.lights(),this.materials(),this.composer(),this.loadOcean();var t=[];t.push(this.loadTerrain()),t.push(this.loadMantas());var r=this.loadFishFlock("/models/fish/","scene.gltf",3);t.push(r.promise),Promise.all(t).then((function(){console.log("all loaded")})),this.assetsManager.load(),this.debugUtils();var c=new Date;this.engine.runRenderLoop((function(){var n=new Date,t=(n-c)/1e3,r=(e.engine.getDeltaTime(),document.getElementById("inspector-host"));r&&(r.style.position="absolute"),e.causticMaterial&&e.causticMaterial.setFloat("time",t),e.waterMaterial&&(e.waterMaterial.setFloat("time",t),e.waterMaterial.setVector3("cameraPosition",e.camera.position)),e.rttMaterials.forEach((function(e){e.setFloat("time",t)})),e.depth=e.camera.position.y<=0?(-e.camera.position.y).toFixed(1):0;var l=0,d=n/1e4,h=new o.Vector3(Math.sin(d+Math.PI/2),0,Math.cos(d+Math.PI/2)),f=10*Math.sin(d),v=10*Math.cos(d);e.mantas.forEach((function(e){var n=!0,t=!1,r=void 0;try{for(var o,c=e.rootNodes[Symbol.iterator]();!(n=(o=c.next()).done);n=!0){var d=o.value;d.position.x=f+2*l,d.position.y=10-1.5*l,d.position.z=v+2*l,d.setDirection(h)}}catch(e){t=!0,r=e}finally{try{n||null==c.return||c.return()}finally{if(t)throw r}}l++})),e.fps=e.engine.getFps().toFixed(),e.scene.render()})),window.addEventListener("resize",this.resize)},beforeDestroy:function(){window.removeEventListener("resize",this.resize),this.engine.stopRenderLoop(),this.scene.dispose(),this.scene=null,this.engine=null},methods:{bootScene:function(e){function n(){this.loadingUIText="Mergulho na Laje de Santos"}n.prototype.displayLoadingUI=function(){alert(this.loadingUIText)},n.prototype.hideLoadingUI=function(){alert("Loaded!")},this.engine=new o.Engine(e,!0),this.engine.loadingUIText="Mergulho na Laje de Santos",this.scene=new o.Scene(this.engine),this.scene.clearColor=o.Color3.FromHexString("#2963CF"),this.camera=new o.UniversalCamera("Camera",new o.Vector3(0,5,0),this.scene),this.camera.applyGravity=!1,this.camera.speed=.1,this.camera.ellipsoid=new o.Vector3(.5,1,.5),window.camera=this.camera,this.camera.keysUp.push("w".charCodeAt(0)),this.camera.keysUp.push("W".charCodeAt(0)),this.camera.minZ=.1,this.camera.maxZ=120,this.camera.setTarget(new o.Vector3(-.7411525845527649,5.202267646789551,-.6401410698890686)),this.camera.attachControl(e,!0),this.scene.collisionsEnabled=!0,this.camera.checkCollisions=!0,this.assetsManager=new o.AssetsManager(this.scene),this.assetsManager.onTaskErrorObservable.add((function(e){console.error("task failed",e.errorObject.message,e.errorObject.exception)}))},sceneOptimizer:function(){return o.SceneOptimizer.OptimizeAsync(this.scene)},debugUtils:function(){this.scene.debugLayer.show(),document.querySelector("footer.footer").style.display="none"},resize:function(){this.engine.resize()},lights:function(){var e=new o.HemisphericLight("light1",new o.Vector3(1,1,0),this.scene);e.diffuse=o.Color3.FromHexString("#CCCCCC"),e.intensity=.4,new o.DirectionalLight("DirectionalLight",new o.Vector3(.2,-1,0),this.scene).diffuse=o.Color3.FromHexString("#FFFFFF"),e.intensity=.8},getCausticMaterial:function(){var e=this.causticMaterial.clone();return e.freeze(),this.rttMaterials.push(e),e},getCausticBlackMaterial:function(){var e=this.causticBlackMaterial.clone();return e.freeze(),this.rttMaterials.push(e),e},materials:function(){o.Effect.ShadersStore.causticVertexShader=T.default,o.Effect.ShadersStore.causticFragmentShader=y.default,o.Effect.ShadersStore.causticblackVertexShader=S.default,o.Effect.ShadersStore.causticblackFragmentShader=C.default,this.causticMaterial=new o.ShaderMaterial("caustic material",this.scene,"caustic",{attributes:["position","normal","uv"],uniforms:["world","worldView","worldViewProjection","view","projection","time","direction"]}),this.causticMaterial.freeze(),this.causticBlackMaterial=new o.ShaderMaterial("caustic black material",this.scene,"causticblack",{attributes:["position","normal","uv"],uniforms:["world","worldView","worldViewProjection","view","projection","time","direction"]}),this.causticBlackMaterial.freeze(),o.Effect.ShadersStore.seaVertexShader=w.default,o.Effect.ShadersStore.seaFragmentShader=x.default,o.Effect.ShadersStore.sea2VertexShader=w.default,o.Effect.ShadersStore.sea2FragmentShader=M.default},composer:function(){var e=this;o.Effect.ShadersStore.underwaterVertexShader=m.default,o.Effect.ShadersStore.underwaterFragmentShader=v.default;var n=this.scene.enableDepthRenderer(),t=new o.PassPostProcess("imagePass",1,null,o.Texture.NEAREST_SAMPLINGMODE,this.engine);this.renderTargetCaustic=new o.RenderTargetTexture("caustic",1024,this.scene),this.scene.customRenderTargets.push(this.renderTargetCaustic),this.setRTTMaterials();var r=new o.PostProcess("Underwater pass","underwater",["fogColor","cameraMinMaxZ","time"],["depthTexture","causticTexture"],1,this.camera,0,this.engine),c=new Date;r.onApply=function(t){var r=(new Date-c)/1e3;t.setColor3("fogColor",e.scene.clearColor),t.setFloat2("cameraMinMaxZ",e.camera.minZ,e.camera.maxZ),t.setFloat("time",r),t.setTexture("causticTexture",e.renderTargetCaustic),t.setTexture("depthTexture",n.getDepthMap())};var l=new o.PostProcessRenderEffect(this.engine,"renderLayer",(function(){return[t]})),d=new o.PostProcessRenderPipeline(this.engine,"pipeline");d.addEffect(l),d.samples=4,d.fxaaEnabled=!0,this.scene.postProcessRenderPipelineManager.addPipeline(d),this.scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline("pipeline",this.camera)},loadSky:function(){var e=o.Mesh.CreateBox("skyBox",5e3,this.scene),n=new o.StandardMaterial("skyBox",this.scene);n.backFaceCulling=!1,n.reflectionTexture=new o.CubeTexture("textures/TropicalSunnyday/TropicalSunnyDay",this.scene),n.reflectionTexture.coordinatesMode=o.Texture.SKYBOX_MODE,n.diffuseColor=new o.Color3(0,0,0),n.specularColor=new o.Color3(0,0,0),n.disableLighting=!0,e.material=n},loadOcean:function(){var e=new o.Texture("/textures/sea/channel2.jpg",this.scene),n=new o.Texture("/textures/sea/channel3.jpg",this.scene),t=new o.ShaderMaterial("water material",this.scene,"sea2",{attributes:["position","normal","uv"],uniforms:["world","worldView","worldViewProjection","view","projection","time","color","channel2","channel3","cameraPosition"]});t.setColor3("waterColor",this.scene.clearColor),t.setFloat("time",0),t.setVector3("cameraPosition",this.camera.position),t.setTexture("channel2",e),t.setTexture("channel3",n),t.backFaceCulling=!1,t.freeze(),this.waterMesh=o.Mesh.CreateGround("waterMesh",128,128,16,this.scene,!1),this.waterMesh.position.y=15,this.waterMesh.flipFaces(),this.waterMesh.material=this.waterMaterial=t;var r=this.getCausticBlackMaterial();this.waterMesh.rttMaterial=r,this.renderTargetCaustic.renderList.push(this.waterMesh)},setRTTMaterialsSlow:function(){var e=this;this.renderTargetCaustic.onBeforeRender=function(){for(var i in e.renderTargetCaustic.renderList)e.renderTargetCaustic.renderList[i]._saved=e.renderTargetCaustic.renderList[i].material,e.renderTargetCaustic.renderList[i].material=e.renderTargetCaustic.renderList[i].rttMaterial},this.renderTargetCaustic.onAfterRender=function(){for(var i in e.renderTargetCaustic.renderList)e.renderTargetCaustic.renderList[i].material=e.renderTargetCaustic.renderList[i]._saved}},setRTTMaterials:function(){var e=this;this.renderTargetCaustic.onBeforeRender=function(n){e.renderTargetCaustic.renderList.forEach((function(e){if("InstancedMesh"!==e.getClassName()){if(e.material&&!e.isFrozen&&"isReady"in e&&e.isReady(!0)){var n=[];e.subMeshes.forEach((function(e){n.push([e.effect,e._materialDefines])})),e.isFrozen=!0,e.material.freeze(),e._saved_orig_material=e.material,e._origSubMeshEffects=n}if(e._origSubMeshEffects&&(e.material=e.rttMaterial,e._rtt_subMeshEffects))for(var s=0;s<e.subMeshes.length;++s){var t;(t=e.subMeshes[s]).setEffect.apply(t,Object(r.a)(e._rtt_subMeshEffects[s]))}}}))},this.renderTargetCaustic.onAfterRender=function(){e.renderTargetCaustic.renderList.forEach((function(e){if("InstancedMesh"!==e.getClassName()&&e._origSubMeshEffects){e._rtt_subMeshEffects||(e._rtt_subMeshEffects=[],e.subMeshes.forEach((function(n){e._rtt_subMeshEffects.push([n.effect,n._materialDefines])}))),e.material=e._saved_orig_material;for(var s=0;s<e.subMeshes.length;++s){var n;(n=e.subMeshes[s]).setEffect.apply(n,Object(r.a)(e._origSubMeshEffects[s]))}}}))}},addToSceneAndCaustic:function(e){var n=this,t=this.getCausticMaterial();return e.forEach((function(e){e.rttMaterial=t,n.renderTargetCaustic.renderList.push(e)})),t},loadTerrain:function(){var e=this;return new Promise((function(n,t){e.assetsManager.addMeshTask("terrain",null,"/models/","terrain.glb").onSuccess=function(t){t.loadedMeshes.forEach((function(e){e.freeze&&(e.freeze(),e.freezeWorldMatrix(),e.convertToUnIndexedMesh(),e.material&&e.material.freeze())})),e.addToSceneAndCaustic(t.loadedMeshes).backFaceCulling=!1,n()}}))},loadBoat:function(){},loadFishFlock:function(e,n,t){var r=this,c=new f(t,new o.Vector3(0,10,0),10);c.cohesion=.05,c.separationMinDistance=10;var l,d,h=[],p=new Promise((function(l,d){o.SceneLoader.LoadAssetContainer(e,n,r.scene,(function(e){e.addAllToScene();var n=r.getCausticMaterial();e.meshes.forEach((function(e){e.position.y=10,e.setEnabled(!1),e.material&&e.material.freeze(),e.rttMaterial=n,r.renderTargetCaustic.renderList.push(e)}));for(var o=function(i){var n=e.instantiateModelsToScene((function(p){return"fish"+p+i})),t=!0,r=!1,o=void 0;try{for(var l,d=n.rootNodes[Symbol.iterator]();!(t=(l=d.next()).done);t=!0){l.value.position.x+=10*(i+1)}}catch(e){r=!0,o=e}finally{try{t||null==d.return||d.return()}finally{if(r)throw o}}n.bird=c.birds[i],h.push(n)},i=0;i<t;i++)o(i);l()}))}));return{models:h,boids:c,promise:p,update:(l=c,d=h,function(e){l.update(e),d.forEach((function(e){var n=!0,t=!1,r=void 0;try{for(var o,c=e.rootNodes[Symbol.iterator]();!(n=(o=c.next()).done);n=!0)o.value.position.copyFrom(e.bird.position)}catch(e){t=!0,r=e}finally{try{n||null==c.return||c.return()}finally{if(t)throw r}}}))})}},loadMantas:function(){var e=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:2,p=new Promise((function(t,r){o.SceneLoader.LoadAssetContainer("/models/manta/","scene.gltf",e.scene,(function(t){t.addAllToScene();var r=e.getCausticMaterial();t.meshes.forEach((function(n){n.scaling=new o.Vector3(.02,.02,.02),n.position.y=10,n.setEnabled(!1),n.material&&n.material.freeze(),n.rttMaterial=r,e.renderTargetCaustic.renderList.push(n)}));for(var c=function(i){var n=t.instantiateModelsToScene((function(p){return"manta"+p+i})),r=!0,o=!1,c=void 0;try{for(var l,d=n.rootNodes[Symbol.iterator]();!(r=(l=d.next()).done);r=!0){var h=l.value;h.position.x+=10*(i+1),e.mantas.push(n),e.renderTargetCaustic.renderList.push(h),e.renderTargetCaustic.renderList=e.renderTargetCaustic.renderList.concat(h.getChildMeshes())}}catch(e){o=!0,c=e}finally{try{r||null==d.return||d.return()}finally{if(o)throw c}}var f=!0,v=!1,m=void 0;try{for(var x,M=n.animationGroups[Symbol.iterator]();!(f=(x=M.next()).done);f=!0){var w=x.value;w.speedRatio=1-.1*i,w.play(!0)}}catch(e){v=!0,m=e}finally{try{f||null==M.return||M.return()}finally{if(v)throw m}}},i=0;i<n;i++)c(i);console.log("mantas loaded")})),t()}));return p},clamp:function(e,n,t){return Math.min(Math.max(e,n),t)}},head:function(){return{link:[{rel:"stylesheet",href:"https://fonts.googleapis.com/css?family=Oxygen+Mono&display=swap"}]}}},_=(t(221),t(4)),P={components:{Underwater:Object(_.a)(E,(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{attrs:{id:"underwater"}},[t("canvas",{attrs:{id:"underwater-3d","touch-action":"none"}}),e._v(" "),t("div",{attrs:{id:"underwater-debug"}},[e._v("\n    "+e._s(e.fps)+" fps\n  ")]),e._v(" "),t("div",{attrs:{id:"underwater-hud"}},[t("div",{attrs:{id:"underwater-hud-depth"}},[e._v("\n      "+e._s(e.depth)+"m\n    ")]),e._v(" "),t("div",{attrs:{id:"underwater-hud-time"}},[e._v("\n      "+e._s(parseInt(e.time/60,10))+":"+e._s(parseInt(e.time%60,10).toString().padStart(2,"0"))+"\n    ")])])])}),[],!1,null,null,null).exports},data:function(){return{}}},F=Object(_.a)(P,(function(){var e=this.$createElement,n=this._self._c||e;return n("article",[n("section",[n("Underwater")],1)])}),[],!1,null,null,null);n.default=F.exports}}]);